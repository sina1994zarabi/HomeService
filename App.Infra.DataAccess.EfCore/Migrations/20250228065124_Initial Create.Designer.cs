// <auto-generated />
using System;
using App.Infra.DataAccess.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.DataAccess.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250228065124_Initial Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تهران"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تمیز کاری"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceOfferingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceOfferingId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Comment = "خوب بود",
                            IsApproved = false,
                            Rating = 4,
                            ReviewDate = new DateTime(2025, 2, 28, 10, 21, 23, 609, DateTimeKind.Local).AddTicks(9222),
                            ServiceOfferingId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Comment = "عالی بود",
                            IsApproved = false,
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 2, 28, 10, 21, 23, 609, DateTimeKind.Local).AddTicks(9237),
                            ServiceOfferingId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "توضیحات سرویس عادی نظافت ",
                            Price = 1000m,
                            SubCategoryId = 1,
                            Title = "سرویس عادی نظافت"
                        },
                        new
                        {
                            Id = 2,
                            Description = "توضیحات کارواش سیار ",
                            Price = 500m,
                            SubCategoryId = 2,
                            Title = "کارواش سیار"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.ServiceOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceOfferings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 28, 10, 21, 23, 610, DateTimeKind.Local).AddTicks(1365),
                            Description = "می توانم این کار را برای شما انجام دهم",
                            ExpertId = 1,
                            ServiceRequestId = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 28, 10, 21, 23, 610, DateTimeKind.Local).AddTicks(1371),
                            Description = "می توانم این کار را برای شما انجام دهم",
                            ExpertId = 2,
                            ServiceRequestId = 2,
                            Status = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDate = new DateTime(2025, 3, 2, 10, 21, 23, 608, DateTimeKind.Local).AddTicks(5211),
                            ClientId = 1,
                            Description = "نضافت حیاط و راه پله",
                            IsCompleted = false,
                            ServiceId = 1,
                            Status = 1,
                            Title = "نظافت و شتشوی آپارتمان"
                        },
                        new
                        {
                            Id = 2,
                            BookingDate = new DateTime(2025, 3, 2, 10, 21, 23, 608, DateTimeKind.Local).AddTicks(5240),
                            ClientId = 2,
                            Description = "روشویی و توشویی با دسترسی به آب و برق",
                            IsCompleted = false,
                            ServiceId = 2,
                            Status = 1,
                            Title = "سرویس کارواش با آب"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Title = "کارواش"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("statuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "در انتظار تایید کارشناس"
                        },
                        new
                        {
                            Id = 2,
                            Name = "در انتظار تایید مشتری"
                        },
                        new
                        {
                            Id = 1,
                            Name = "در انتظار دریافت پیشنهادات"
                        },
                        new
                        {
                            Id = 4,
                            Name = "تایید شده"
                        },
                        new
                        {
                            Id = 5,
                            Name = "لغو شده"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            FullName = "سینا ضرابی",
                            Gender = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("AccountBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AccountBalance = 0m,
                            ConcurrencyStamp = "47a7d022-b65b-4970-8680-09f5f5ebcd07",
                            DateRegistered = new DateTime(2025, 2, 28, 10, 21, 22, 634, DateTimeKind.Local).AddTicks(7946),
                            Email = "Admin@Gmail.com",
                            EmailConfirmed = true,
                            FullName = "AdminFullName",
                            Gender = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMINUSERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEDAeWHnqoUi+3FLYTz9AAmIFRhurch6znDTCfklaujFheFgzGP/CrUgyXrzCDtW6wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09fbf9dc-3a54-4516-a5c2-34908b6211c3",
                            TwoFactorEnabled = false,
                            UserName = "adminUserName"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AccountBalance = 0m,
                            ConcurrencyStamp = "1cfaf7ba-2a78-4e55-a2f8-ad0189608145",
                            DateRegistered = new DateTime(2025, 2, 28, 10, 21, 22, 804, DateTimeKind.Local).AddTicks(4113),
                            Email = "Client1@Gmail.com",
                            EmailConfirmed = true,
                            FullName = "نام و نام خانوادگی کاربر یک",
                            Gender = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "Client1@GMAIL.COM",
                            NormalizedUserName = "Client1USERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEK4pU5GaaPTB5OU6k1/biBbf+pMlBjnQHJs7SwFl7icB3y8T5Ga2HeH/A46XY/wP7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa8f4057-1b1c-4ba4-8443-f39e69e378a9",
                            TwoFactorEnabled = false,
                            UserName = "Client1UserName"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AccountBalance = 0m,
                            ConcurrencyStamp = "7d92bd6b-119e-4be7-8651-84ba31b47900",
                            DateRegistered = new DateTime(2025, 2, 28, 10, 21, 23, 5, DateTimeKind.Local).AddTicks(7624),
                            Email = "Client2@Gmail.com",
                            EmailConfirmed = true,
                            FullName = "نام و نام خانوادگی کاربر دو",
                            Gender = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2USERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEFJwnzdrT467QFdDS8urPkj/UobHzxF4jF17s3HX4bGuQWGzs9a2Bn7awRRQ7l6u0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d64738f8-68c8-4cb8-aa7f-703d3f45071e",
                            TwoFactorEnabled = false,
                            UserName = "Client2UserName"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AccountBalance = 0m,
                            ConcurrencyStamp = "8b658149-ad76-4169-aa78-a7335ba1d4c2",
                            DateRegistered = new DateTime(2025, 2, 28, 10, 21, 23, 201, DateTimeKind.Local).AddTicks(8215),
                            Email = "Expert1@Gmail.com",
                            EmailConfirmed = true,
                            FullName = "نام  و نام خانوادگی کارشناس شماره یک",
                            Gender = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT1@GMAIL.COM",
                            NormalizedUserName = "EXPERT1USERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJp2+phjfkAuSfibMN2MTejyv8kzUVeWXyS4WlFFzR2ugO6UzVF+PFcFrEh67pSVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f0d7735-7ca5-41a3-9cec-6af1e80ca8ea",
                            TwoFactorEnabled = false,
                            UserName = "Expert1UserName"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AccountBalance = 0m,
                            ConcurrencyStamp = "46c4107f-193d-4d89-a7d9-0ea76b7d3c3d",
                            DateRegistered = new DateTime(2025, 2, 28, 10, 21, 23, 423, DateTimeKind.Local).AddTicks(2213),
                            Email = "Expert2@Gmail.com",
                            EmailConfirmed = true,
                            FullName = "نام  و نام خانوادگی کارشناس دو",
                            Gender = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT2@GMAIL.COM",
                            NormalizedUserName = "EXPERT2USERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4DiUM46WuKpmU0Hht2uAgrpzA2POS5lspxGt5RMvldcIrFXDbJZek7+AHroY/nsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9e1aaed-72ec-4a9f-a57a-8c1d11a3f719",
                            TwoFactorEnabled = false,
                            UserName = "Expert2UserName"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 2,
                            FullName = "نام و نام خانوادگی کاربر شماره یک",
                            Gender = 1,
                            PhoneNumber = "09wwwwwwwwww"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 3,
                            FullName = "نام و نام خانوادگی کارشناس شماره دو",
                            Gender = 1,
                            PhoneNumber = "09zzzzzzzzz"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 4,
                            FullName = "نام و نام خانوادگی کارشناس شماره یک",
                            Gender = 1,
                            IsApproved = false,
                            PhoneNumber = "09xxxxxxxxx"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 5,
                            FullName = "نام و نام خانوادگی کارشناس شماره دو",
                            Gender = 1,
                            IsApproved = false,
                            PhoneNumber = "09yyyyyyyyy"
                        });
                });

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ExpertService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntity.Image", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Services.ServiceRequest", null)
                        .WithMany("Images")
                        .HasForeignKey("ServiceRequestId");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Review", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Services.ServiceOffering", "ServiceOffering")
                        .WithMany()
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ServiceOffering");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Service", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Services.SubCategory", "Subcategory")
                        .WithMany("Services")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.ServiceOffering", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.Expert", "Expert")
                        .WithMany("ServiceOfferings")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Services.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceOfferings")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.ServiceRequest", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.Client", "Client")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Services.Service", "Service")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.SubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Services.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Admin", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.AppUser", "AppUser")
                        .WithOne("AdminProfile")
                        .HasForeignKey("App.Domain.Core.Entities.User.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Client", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.AppUser", "AppUser")
                        .WithOne("ClientProfile")
                        .HasForeignKey("App.Domain.Core.Entities.User.Client", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.AppUser", "AppUser")
                        .WithOne("ExpertProfile")
                        .HasForeignKey("App.Domain.Core.Entities.User.Expert", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Services.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.Service", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.ServiceRequest", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ServiceOfferings");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Services.SubCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.AppUser", b =>
                {
                    b.Navigation("AdminProfile");

                    b.Navigation("ClientProfile");

                    b.Navigation("ExpertProfile");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Client", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.User.Expert", b =>
                {
                    b.Navigation("ServiceOfferings");
                });
#pragma warning restore 612, 618
        }
    }
}
