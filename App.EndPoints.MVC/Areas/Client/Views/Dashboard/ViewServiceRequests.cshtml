@using App.Domain.Core.Enums;
@using FrameWork;
@model List<App.Domain.Core.Entities.Services.ServiceRequest>

<h2 class="mt-4 mb-3">سرویس های من</h2>

@if (Model.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Service</th>
                    <th>Booking Date</th>
                    <th>Status</th>
                    <th>Offers</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in Model)
                {
                    <tr>
                        <td><a href="@Url.Action("Details", "ServiceRequests", new { id = request.Id })">@request.Title</a></td>
                        <td>@request.Description</td>
                        <td>@request.Service.Title</td>
                        <td>@request.BookingDate.ToPersianString()</td>
                        <td>
                            @{
                                var (statusText, badgeClass) = GetStatusDisplay(request.Status);
                            }
                            <span class="badge @badgeClass">@statusText</span>
                        </td>
                        <td>@request.ServiceOfferings.Count()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info" role="alert">
        سرویسی یافت نشد.
    </div>
}

@functions {
    private (string, string) GetStatusDisplay(StatusEnum status)
    {
        switch (status)
        {
            case StatusEnum.AwaitingOffers:
                return ("Awaiting Offers", "badge-warning");
            case StatusEnum.PendingClientConfirmation:
                return ("Pending Confirmation", "badge-info");
            case StatusEnum.InProgress:
                return ("In Progress", "badge-primary");
            case StatusEnum.Completed:
                return ("Completed", "badge-success");
            case StatusEnum.AwaitingPayment:
                return ("Awaiting Payment", "badge-danger");
            case StatusEnum.Paid:
                return ("Paid", "badge-success");
            case StatusEnum.Cancelled:
                return ("Cancelled", "badge-secondary");
            default:
                return (status.ToString(), "badge-secondary");
        }
    }
}